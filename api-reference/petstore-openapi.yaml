openapi: 3.0.3
info:
  title: Pet Store API
  description: |
    A comprehensive Pet Store API for managing pets, categories, and users.
    This is a sample API demonstrating all major endpoints and features.
    
    ## Features
    - Complete CRUD operations for pets
    - Category management
    - User authentication and management
    - File upload for pet images
    - Advanced filtering and pagination
    
  version: "1.0.0"
  contact:
    name: Pet Store Support
    email: support@petstore.example.com
    url: https://petstore.example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.petstore.example.com/v1
    description: Production server
  - url: https://staging-api.petstore.example.com/v1
    description: Staging server

security:
  - bearerAuth: []
  - apiKey: []

paths:
  /pets:
    get:
      summary: List all pets
      description: Retrieve a paginated list of all pets with optional filtering
      operationId: listPets
      tags:
        - Pets
      parameters:
        - name: limit
          in: query
          description: Number of pets to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of pets to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          description: Filter by category name
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by pet status
          required: false
          schema:
            type: string
            enum: [available, pending, sold]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a new pet
      description: Add a new pet to the store
      operationId: createPet
      tags:
        - Pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePetRequest'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /pets/{petId}:
    get:
      summary: Get pet by ID
      description: Retrieve detailed information about a specific pet
      operationId: getPetById
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to retrieve
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update pet
      description: Update an existing pet's information
      operationId: updatePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePetRequest'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete pet
      description: Remove a pet from the store
      operationId: deletePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /pets/{petId}/upload-image:
    post:
      summary: Upload pet image
      description: Upload an image for a specific pet
      operationId: uploadPetImage
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of the pet
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Pet image file (JPEG, PNG, GIF)
                description:
                  type: string
                  description: Optional image description
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image uploaded successfully"
                  imageUrl:
                    type: string
                    format: uri
                    example: "https://images.petstore.example.com/pets/123/main.jpg"

  /categories:
    get:
      summary: List all categories
      description: Retrieve all pet categories
      operationId: listCategories
      tags:
        - Categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

    post:
      summary: Create category
      description: Create a new pet category
      operationId: createCategory
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /users:
    get:
      summary: List users
      description: Retrieve a list of all users (admin only)
      operationId: listUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

    post:
      summary: Create user
      description: Create a new user account
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      operationId: login
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the login endpoint
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for accessing the Pet Store API

  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - category
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 123
          description: Unique identifier for the pet
        name:
          type: string
          example: "Buddy"
          description: Pet's name
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
            format: uri
          example: 
            - "https://images.petstore.example.com/pets/123/main.jpg"
            - "https://images.petstore.example.com/pets/123/side.jpg"
          description: Array of photo URLs
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Pet tags for categorization
        status:
          type: string
          enum: [available, pending, sold]
          example: "available"
          description: Pet status in the store
        age:
          type: integer
          minimum: 0
          example: 3
          description: Pet's age in years
        breed:
          type: string
          example: "Golden Retriever"
          description: Pet's breed
        description:
          type: string
          example: "Friendly and energetic dog, great with kids"
          description: Detailed description of the pet
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: Timestamp when the pet was added
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T14:45:00Z"
          description: Timestamp when the pet was last updated

    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Category identifier
        name:
          type: string
          example: "Dogs"
          description: Category name
        description:
          type: string
          example: "All types of dogs"
          description: Category description

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "friendly"

    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "johndoe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1-234-567-8900"
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status

    CreatePetRequest:
      type: object
      required:
        - name
        - categoryId
        - status
      properties:
        name:
          type: string
          example: "Buddy"
        categoryId:
          type: integer
          format: int64
          example: 1
        photoUrls:
          type: array
          items:
            type: string
            format: uri
        status:
          type: string
          enum: [available, pending, sold]
        age:
          type: integer
          minimum: 0
        breed:
          type: string
        description:
          type: string

    UpdatePetRequest:
      type: object
      properties:
        name:
          type: string
        categoryId:
          type: integer
          format: int64
        photoUrls:
          type: array
          items:
            type: string
            format: uri
        status:
          type: string
          enum: [available, pending, sold]
        age:
          type: integer
          minimum: 0
        breed:
          type: string
        description:
          type: string

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        phone:
          type: string

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer
          example: 3600
          description: Token expiration time in seconds

    Pagination:
      type: object
      properties:
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        total:
          type: integer
          example: 150
        hasMore:
          type: boolean
          example: true

    Error:
      type: object
      required:
        - message
        - code
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "The request data is invalid"
        details:
          type: object
          additionalProperties: true
          example:
            field: "name"
            reason: "Name is required"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "The requested resource was not found"

tags:
  - name: Pets
    description: Pet management operations
  - name: Categories
    description: Pet category management
  - name: Users
    description: User management operations
  - name: Authentication
    description: Authentication and authorization
